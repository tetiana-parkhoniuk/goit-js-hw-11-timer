{"version":3,"sources":["index.js"],"names":["refs","timer","document","querySelector","days","hours","mins","secs","CountdownTimer","constructor","onTick","targetDate","start","setInterval","currentTime","Date","now","deltaTime","timeComponents","getTimeComponents","time","pad","Math","floor","value","String","padStart","updateCountdownTimerFace","textContent","newCountdownTimer","selector"],"mappings":";;;AAkFA,aAlFA,QAAA,oBAEA,MAAMA,EAAO,CACTC,MAAOC,SAASC,cAAc,YAC9BC,KAAMF,SAASC,cAAc,qBAC7BE,MAAOH,SAASC,cAAc,sBAC9BG,KAAMJ,SAASC,cAAc,qBAC7BI,KAAML,SAASC,cAAc,sBAGjC,MAAMK,EACFC,aAAY,OAAEC,EAAF,WAAUC,IACbD,KAAAA,OAASA,EACTC,KAAAA,WAAaA,EAGtBC,QACIC,YAAY,KACFC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKN,WAAaG,EAC9BI,EAAiB,KAAKC,kBAAkBF,GAEzCP,KAAAA,OAAOQ,IACb,KAGPC,kBAAkBC,GAMX,MAAA,CAAEhB,KALI,KAAKiB,IAAIC,KAAKC,MAAMH,EAAQ,QAK1Bf,MAJD,KAAKgB,IAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAI9Cd,KAHT,KAAKe,IAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAGlCb,KAFf,KAAKc,IAAIC,KAAKC,MAAOH,EAAQ,IAAc,OAKvDC,IAAIG,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAI1C,SAASC,GAAyB,KAAEvB,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IACnDP,EAAKI,KAAKwB,YAAcxB,EACxBJ,EAAKK,MAAMuB,YAAcvB,EACzBL,EAAKM,KAAKsB,YAActB,EACxBN,EAAKO,KAAKqB,YAAcrB,EAG5B,MAAMsB,EAAoB,IAAIrB,EAAe,CACzCsB,SAAU,WACVnB,WAAY,IAAII,KAAK,iBACrBL,OAAQiB,IAGZE,EAAkBjB","file":"src.9378f65b.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n    timer: document.querySelector('#timer-1'),\n    days: document.querySelector('[data-value=days]'),\n    hours: document.querySelector('[data-value=hours]'),\n    mins: document.querySelector('[data-value=mins]'),\n    secs: document.querySelector('[data-value=secs]'),\n};\n\nclass CountdownTimer {\n    constructor({ onTick, targetDate }) {\n        this.onTick = onTick;\n        this.targetDate = targetDate;\n    }\n\n    start() {\n        setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - currentTime;\n            const timeComponents = this.getTimeComponents(deltaTime);\n\n            this.onTick(timeComponents);\n        }, 1000);\n    }\n\n    getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n    }\n    \n     pad(value) {\n         return String(value).padStart(2, '0');\n    }\n}\n\nfunction updateCountdownTimerFace({ days, hours, mins, secs }) {\n    refs.days.textContent = days;\n    refs.hours.textContent = hours;\n    refs.mins.textContent = mins;\n    refs.secs.textContent = secs;\n}\n\nconst newCountdownTimer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('June 13, 2021'),\n    onTick: updateCountdownTimerFace,\n})\n\nnewCountdownTimer.start();\n\n\n// const CountdownTimer = {\n//     start() {\n//         const targetDate = new Date('June 13, 2021');\n\n//         setInterval(() => {\n//             const currentTime = Date.now();\n//             const deltaTime = targetDate - currentTime;\n//             const timeComponents= getTimeComponents(deltaTime);\n//             updateCountdownTimerFace(timeComponents);\n//         }, 1000);\n//     },\n// };\n\n// function pad(value) {\n//     return String(value).padStart(2, '0');\n// };\n\n// function getTimeComponents(time) {\n//     const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//     const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//     const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//     return { days, hours, mins, secs };\n// }; \n\n// CountdownTimer.start();"]}